/*
  Breakpoints
*/

@function breakpoint($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @return map-get($breakpoints, $breakpoint);
  }
}

@mixin bp-under($width) {
  @media only screen and (max-width: $width - 1) {
    @content;
  }
}

@mixin bp-above($width) {
  @media only screen and (min-width: $width) {
    @content;
  }
}

@mixin bp-between($min-width, $max-width) {
  @media only screen and (min-width: $min-width) and (max-width: $max-width) {
    @content;
  }
}

@mixin bp($max-width) {
  // default is bp-under
  @include bp-under($max-width) {
    @content;
  }
}

@function is-px($str) {
  $tStr: quote($str);
  @return str-index($tStr, px);
}

// Extract breakpoint from a global $breakpoints map

@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: #{map-get($breakpoints, $breakpoint)}) {
      @content;
    }
  }

  @else if $breakpoint == "default" {
    @content;
  }

  @else if is-px($breakpoint) {
    @media (min-width: #{$breakpoint}) {
      @content;
    }
  }

  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@function keep-same($val) {
  @return $val;
}

@mixin bp-options($configKey, $config, $transform: keep-same) {
  @each $configBreakpoint, $configValue in $config {
    @include respond-to($configBreakpoint) {
      #{$configKey}: call($transform, $configValue);
    }
  }
}
